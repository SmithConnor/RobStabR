base::data.frame,
stringsAsFactors = FALSE)
rownames(output[[i]]) = paste0("Model ",1:NROW(output[[i]]))
}
list = output2
list = base::lapply(X = list,
FUN = select_k,
k = k)
output = base::lapply(X = list,
FUN = matrix_IC,
data = data,
family = family,
tcc = tcc)
for( i in 1:length(output)){
output[[i]]$candidateSpace = plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
rownames(output[[i]]) = paste0("Model ",1:NROW(output[[i]]))
}
length(output)
plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
output = base::lapply(X = list,
FUN = matrix_IC,
data = data,
family = family,
tcc = tcc)
output
i = 1
output[[i]]$candidateSpace
plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
output[[i]]$candidateSpace = plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
output[[1]]
devtools::document()
devtools::load_all()
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
output = output2
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
output = base::lapply(X = list,
FUN = matrix_IC,
data = data,
family = family,
tcc = tcc)
for( i in 1:length(output)){
output[[i]]$candidateSpace = plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
rownames(output[[i]]$candidateSpace) = paste0("Model ",1:NROW(output[[i]]))
}
i = 1
output[[i]]$candidateSpace = plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
output[[``]]
output[[1]]
output[[i]]$candidateSpace
output[[1]]
output = base::lapply(X = list,
FUN = matrix_IC,
data = data,
family = family,
tcc = tcc)
output
plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
output[[i]]$candidateSpace = plyr::ldply (output[[i]]$candidateSpace,
base::data.frame,
stringsAsFactors = FALSE)
output[[1]]
rownames(output[[i]]$candidateSpace)
rownames(output[[i]]$candidateSpace) = paste0("Model ",1:NROW(output[[i]]))
devtools::document()
devtools::load_all()
output = output2
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
output
length(output)
output[[1]]$candidateSpace
c("coef", "wald", "dev")[coef,wald,dev]
c("coef", "wald", "dev")[T,T,F]
[T,T,F]
c(T,T,F)
c("coef", "wald", "dev")[c(coef,wald,dev)]
additional = countModels %>%
base::names()
addition = base::paste0(additional, "Count")
for(i in 1:nMethods){
output[[nMethods + i]] = countModels[[i]]
}
names(output)[nMethods + 1:nMethods] = addition
for(i in 1:nMethods){
output[[2*nMethods + i]] = sVals[[i]]
}
coefTime
sValues
# Parameters
n = base::NROW(data)
p = base::NCOL(data) - 1
nMethods = coef + wald + dev
# Variables
devQD = 0
bootstrapModels = base::rep(x = list(NA),
times = B)
varNames = base::colnames(x = data)[-(p+1)]
coefValues = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(coefValues) = varNames
waldValues = matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(waldValues) = varNames
devValues = matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(devValues) = varNames
output = base::list()
sVals = base::list()
# Initial Fit
glmFull = robustbase::glmrob(formula = y~.,
data = data,
family = family,
control = robustbase::glmrobMqle.control(tcc = tcc,
maxit = 1000))
glmFullResid = stats::residuals(object = glmFull,
type = resid)
residOrder = rank(x = glmFullResid)
residStrata = ceiling(x = residOrder * nStrata / n)
if(base::all(base::is.na(bootstraps))){
bootstraps = base::matrix(data = NA_integer_,
nrow = B,
ncol = m)
for(b in 1:B){
for(o in 1:nStrata){
bootstraps[b, (o - 1) * m / nStrata + (1 : (m / nStrata))] = base::sample(x = which(residStrata == o),
size = m / nStrata)
}
}}
# Fit Models
sValues = plyr::alply(.data = bootstraps,
.margins = 1,
.fun = s_values,
data = data,
n= n,
p = p,
family = family,
coef = coef,
wald = wald,
dev = dev,
.parallel = FALSE,
tcc = tcc)
timing3 = base::rep(X = 0,
times = 3)
if(coef == TRUE){
tictoc::tic()
coefPath = lapply(X = sValues,
FUN = solution_path,
row = 1)
coefSpace = reduced_space(list = coefPath, vector = varNames)
output$coefSpace = coefSpace
sVals$coef = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$coef[i,] = sValues[[i]][[1]][1,]
}
base::colnames(sVals$coef) = varNames
base::rownames(sVals$coef) = base::paste0("Bootstrap",1:B)
coefTime = tictoc::toc(quiet = TRUE)
timing3[1] = coefTime$toc - coefTime$tic
}
timing3 = base::rep(X = 0,
times = 3)
0
rep(X = 1, times = 3)
rep(X = "a", times = 3)
rep(1, times = 3)
timing3 = base::rep(0,
times = 3)
if(coef == TRUE){
tictoc::tic()
coefPath = lapply(X = sValues,
FUN = solution_path,
row = 1)
coefSpace = reduced_space(list = coefPath, vector = varNames)
output$coefSpace = coefSpace
sVals$coef = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$coef[i,] = sValues[[i]][[1]][1,]
}
base::colnames(sVals$coef) = varNames
base::rownames(sVals$coef) = base::paste0("Bootstrap",1:B)
coefTime = tictoc::toc(quiet = TRUE)
timing3[1] = coefTime$toc - coefTime$tic
}
if(wald == TRUE){
tictoc::tic()
waldPath = lapply(X = sValues,
FUN = solution_path,
row = 2)
waldSpace = reduced_space(list = waldPath, vector = varNames)
output$waldSpace = waldSpace
sVals$wald = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$wald[i,] = sValues[[i]][[1]][2,]
}
base::colnames(sVals$wald) = varNames
base::rownames(sVals$wald) = base::paste0("Bootstrap",1:B)
waldTime = tictoc::toc(quiet = TRUE)
timing3[2] = waldTime$toc - waldTime$tic
}
if(dev == TRUE){
tictoc::tic()
devQD = base::matrix(data = NA,
nrow = B,
ncol = p)
devPath = lapply(X = sValues,
FUN = solution_path,
row = 3)
devSpace = reduced_space(list = devPath, vector = varNames)
output$devSpace = devSpace
sVals$dev = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$dev[i,] = sValues[[i]][[1]][3,]
devQD[i,] = sValues[[i]][[2]]
}
base::colnames(sVals$dev) = varNames
base::rownames(sVals$dev) = base::paste0("Bootstrap",1:B)
devTime = tictoc::toc(quiet = TRUE)
timing3[3] = devTime$toc - devTime$tic
}
countModels = count_models(output,
k = k)
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
timing2 = base::rep(0,
times = 3)
for(i in 1:base::length(output)){
output[[i]] = output[[i]]$candidateSpace
timing2[i] = output[[i]]$timing
}
n = base::NROW(data)
p = base::NCOL(data) - 1
nMethods = coef + wald + dev
# Variables
devQD = 0
bootstrapModels = base::rep(x = list(NA),
times = B)
varNames = base::colnames(x = data)[-(p+1)]
coefValues = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(coefValues) = varNames
waldValues = matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(waldValues) = varNames
devValues = matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(devValues) = varNames
output = base::list()
sVals = base::list()
# Initial Fit
glmFull = robustbase::glmrob(formula = y~.,
data = data,
family = family,
control = robustbase::glmrobMqle.control(tcc = tcc,
maxit = 1000))
glmFullResid = stats::residuals(object = glmFull,
type = resid)
residOrder = rank(x = glmFullResid)
residStrata = ceiling(x = residOrder * nStrata / n)
# Generate weights
if(base::all(base::is.na(bootstraps))){
bootstraps = base::matrix(data = NA_integer_,
nrow = B,
ncol = m)
for(b in 1:B){
for(o in 1:nStrata){
bootstraps[b, (o - 1) * m / nStrata + (1 : (m / nStrata))] = base::sample(x = which(residStrata == o),
size = m / nStrata)
}
}}
# Fit Models
sValues = plyr::alply(.data = bootstraps,
.margins = 1,
.fun = s_values,
data = data,
n= n,
p = p,
family = family,
coef = coef,
wald = wald,
dev = dev,
.parallel = FALSE,
tcc = tcc)
timing3 = base::rep(0,
times = 3)
if(coef == TRUE){
tictoc::tic()
coefPath = lapply(X = sValues,
FUN = solution_path,
row = 1)
coefSpace = reduced_space(list = coefPath, vector = varNames)
output$coefSpace = coefSpace
sVals$coef = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$coef[i,] = sValues[[i]][[1]][1,]
}
base::colnames(sVals$coef) = varNames
base::rownames(sVals$coef) = base::paste0("Bootstrap",1:B)
coefTime = tictoc::toc(quiet = TRUE)
timing3[1] = coefTime$toc - coefTime$tic
}
if(wald == TRUE){
tictoc::tic()
waldPath = lapply(X = sValues,
FUN = solution_path,
row = 2)
waldSpace = reduced_space(list = waldPath, vector = varNames)
output$waldSpace = waldSpace
sVals$wald = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$wald[i,] = sValues[[i]][[1]][2,]
}
base::colnames(sVals$wald) = varNames
base::rownames(sVals$wald) = base::paste0("Bootstrap",1:B)
waldTime = tictoc::toc(quiet = TRUE)
timing3[2] = waldTime$toc - waldTime$tic
}
if(dev == TRUE){
tictoc::tic()
devQD = base::matrix(data = NA,
nrow = B,
ncol = p)
devPath = lapply(X = sValues,
FUN = solution_path,
row = 3)
devSpace = reduced_space(list = devPath, vector = varNames)
output$devSpace = devSpace
sVals$dev = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$dev[i,] = sValues[[i]][[1]][3,]
devQD[i,] = sValues[[i]][[2]]
}
base::colnames(sVals$dev) = varNames
base::rownames(sVals$dev) = base::paste0("Bootstrap",1:B)
devTime = tictoc::toc(quiet = TRUE)
timing3[3] = devTime$toc - devTime$tic
}
countModels = count_models(output,
k = k)
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
timing2 = base::rep(0,
times = 3)
output2 = output
output[[1]]
output[[2]]
output[[3]]
output[[3]]$timing
i = 1
output[[i]] = output[[i]]$candidateSpace
timing2[i] = output[[i]]$timing
output = output2
timing2 = base::rep(0,
times = 3)
for(i in 1:base::length(output)){
timing2[i] = output[[i]]$timing
output[[i]] = output[[i]]$candidateSpace
}
timing2
base::names(output) = c("coef", "wald", "dev")[c(coef,wald,dev)]
additional = countModels %>%
base::names()
addition = base::paste0(additional, "Count")
for(i in 1:nMethods){
output[[nMethods + i]] = countModels[[i]]
}
names(output)[nMethods + 1:nMethods] = addition
for(i in 1:nMethods){
output[[2*nMethods + i]] = sVals[[i]]
}
names(output)[2*nMethods + 1:(nMethods)] = base::paste0(additional, "SVal")
base::colnames(devQD) = varNames
base::rownames(devQD) = base::paste0("B",
1:B)
output$devQD = devQD
base::rownames(bootstraps) = base::paste0("B",
1:B)
output$bootsrap = bootstraps
output$varNames = varNames
finalTime = base::rep(X = 0,
times = 3)
finalTime = base::rep(0,
times = 3)
for(b in 1:B){
finalTime = finalTime + sValues[[b]][[3]]
}
finalTime = finalTime + timing2 + timing3
finalTime
devtools::document
devtools::document()
devtools::load_all()
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log),
tcc = 1.5)
devtools::document()
devtools::load_all()
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log),
tcc = 1.5)
hospRobStab
hospRobStab$time
tic()
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log),
tcc = 1.5)
b = toc()
b$toc-b$tic
hospRobStab$time
hospRobStab$time %>% sum()
devtools::document()
devtools::load_all()
tic()
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log),
tcc = 1.5)
b = toc()
b$toc-b$tic
hospRobStab$time
hospRobStab$time %>% sum()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
example_1 = paper_results_simple(seed = 1234, n = 256, p = 8, beta = c(1,-1.5,0.2,0,0,0,0,0))
example_1 = paper_results_simple(startSeed = 1234, n = 256, p = 8, beta = c(1,-1.5,0.2,0,0,0,0,0))
example_1 = paper_results_simple(startSeed = 1234, n = 256, p = 8, beta = c(1,-1.5,0.2,0,0,0,0,0), tcc = 2)
devtools::document()
devtools::load_all()
example_1 = paper_results_simple(startSeed = 1234, n = 256, p = 8, beta = c(1,-1.5,0.2,0,0,0,0,0), tcc = 2)
warnings()
devtools::document()
devtools::load_all()
example_1 = paper_results_simple(startSeed = 1234, n = 256, p = 8, beta = c(1,-1.5,0.2,0,0,0,0,0), tcc = 2)
library(formula.tools)
as.character.formula
?as.character.formula
devtools::document()
devtools::load_all()
example_1 = paper_results_simple(startSeed = 1234, n = 256, p = 8, beta = c(1,-1.5,0.2,0,0,0,0,0), tcc = 2)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
example_1 = paper_results_simple(startSeed = 1234, n = 256, p = 8, beta = c(1,-1.5,0.2,0,0,0,0,0), tcc = 2)
install.packages('tidyselect')
install.packages("tidyselect")
install.packages("tidyselect")
devtools::document()
install.packages("tidyselect")
install.packages("tidyselect")
