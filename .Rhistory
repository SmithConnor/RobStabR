out = base::data.frame(model = vector[1],
dimension = vector[2],
count = vector[3],
P1 = as.numeric(dev  + p*log(n)),
P2 = as.numeric(dev + p*(log(n) + 1)))
return(out)
}
#####
solution_path_non = function(list, row){
matrix = list
vector = matrix[row, ]
p = base::length(vector)
absVector = base::abs(vector)
ranks =  p + 1 - base::rank(absVector)
var = base::names(ranks)
n = base::length(ranks)
matrix = base::matrix(data = NA_integer_,
nrow = n-1,
ncol = 2)
df = base::data.frame(matrix)
base::names(df) <- c("Variables","Dimension")
for (i in 1:(n-1)){
whichVar = ranks <= i
string = base::paste(c("1", var[whichVar]), sep = "", collapse = "+")
df$Variables[i] = string
df$Dimension[i] = i
}
return(df)
}
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP$plots$dev
devtools::document()
devtools::load_all()
library("robmixglm")
library("magrittr")
library("dplyr")
data("hospcosts", package ="robmixglm")
data = hospcosts %>%
dplyr::mutate(y = costs) %>%
dplyr::select(-id, - costs, -los)
resamplePaper = NA
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
devtools::document()
devtools::load_all()
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP = sVIP(robStab = hospRobStab)
hospRobStab
robStab = hospRobStab
newRobStab = list(robStab[[7]],
robStab[[8]],
robStab[[9]])
gMat = newRobStab %>%
base::lapply(., g_mat)
df$Dimension =  factor(df$Dimension, levels = colnames(gMat))
colnames(gMat)
gMat
devtools::document()
devtools::load_all()
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP$plots$dev
data("hospcosts", package ="robmixglm")
data = hospcosts %>%
dplyr::mutate(y = costs) %>%
dplyr::select(-id, - costs, -los)
resamplePaper = NA
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
data("hospcosts", package ="robmixglm")
data = hospcosts %>%
dplyr::mutate(y = costs) %>%
dplyr::select(-id, - costs, -los)
resamplePaper = NA
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP$plots$dev
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP$plots$dev
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP$plots$dev
saveRDS(hospRobStab, "hospital_robust_RobStab.rds")
saveRDS(hospRobStabNon, "hospital_RobStab.rds")
hospital_RobStab <- readRDS("D:/Project_1/RobStabR/manuscript/hospital_RobStab.rds")
hospital_RobStab <- readRDS("~/manuscript/hospital_RobStab.rds")
getwd()
hospital_RobStab <- readRDS("./manuscript/hospital_RobStab.rds")
?readRDS
?data
paperRobStab = base::readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
paperRobStab = base::readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
readRDS("./manuscript/hospital_RobStab.rds")
?readRDS
paperRobStab = base::readRDS("./manuscript/hospital_RobStab.rds")
paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
readRDS("./manuscript/hospital_RobStab.rds")
readRDS("./manuscript/hospital_RobStab.rds")
paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
hospital_RobStab <- readRDS("D:/Project_1/RobStabR/manuscript/hospital_RobStab.rds")
hospital_RobStab <- readRDS("./manuscript/hospital_RobStab.rds")
paperRobStab = readRDS("./manuscript/hospital_RobStab.rds")
devtools::document()
devtools::load_all()
resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospRobStab$bootsrap
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
devtools::document()
devtools::load_all()
utils::data("hospcosts", package ="robmixglm")
data = hospcosts %>%
dplyr::mutate(y = costs) %>%
dplyr::select(-id, - costs, -los)
paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
#paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
#paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
#paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
#paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP$plots$dev
devtools::document()
devtools::load_all()
library("robmixglm")
library("magrittr")
library("dplyr")
utils::data("hospcosts", package ="robmixglm")
data = hospcosts %>%
dplyr::mutate(y = costs) %>%
dplyr::select(-id, - costs, -los)
#paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log),
tcc = 1.5)
data = data;
B = 100;
m = 50;
nStrata = 5;
family = Gamma(link = log);
tcc = 1.5
k = 1;
resid = "pearson";
coef = TRUE;
wald = TRUE;
dev = TRUE;
bootstraps = NA
# Parameters
n = base::NROW(data)
p = base::NCOL(data) - 1
nMethods = coef + wald + dev
# Variables
devQD = 0
bootstrapModels = base::rep(x = list(NA),
times = B)
varNames = base::colnames(x = data)[-(p+1)]
coefValues = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(coefValues) = varNames
waldValues = matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(waldValues) = varNames
devValues = matrix(data = NA_integer_,
nrow = B,
ncol = p)
colnames(devValues) = varNames
output = base::list()
sVals = base::list()
# Initial Fit
glmFull = robustbase::glmrob(formula = y~.,
data = data,
family = family,
control = robustbase::glmrobMqle.control(tcc = tcc,
maxit = 1000))
glmFullResid = stats::residuals(object = glmFull,
type = resid)
residOrder = rank(x = glmFullResid)
residStrata = ceiling(x = residOrder * nStrata / n)
if(base::all(base::is.na(bootstraps))){
bootstraps = base::matrix(data = NA_integer_,
nrow = B,
ncol = m)
for(b in 1:B){
for(o in 1:nStrata){
bootstraps[b, (o - 1) * m / nStrata + (1 : (m / nStrata))] = base::sample(x = which(residStrata == o),
size = m / nStrata)
}
}}
# Fit Models
sValues = plyr::alply(.data = bootstraps,
.margins = 1,
.fun = s_values,
data = data,
n= n,
p = p,
family = family,
coef = coef,
wald = wald,
dev = dev,
.parallel = FALSE)
# Fit Models
sValues = plyr::alply(.data = bootstraps,
.margins = 1,
.fun = s_values,
data = data,
n= n,
p = p,
family = family,
coef = coef,
wald = wald,
dev = dev,
.parallel = FALSE,
tcc = tcc)
family
# Fit Models
sValues = plyr::alply(.data = bootstraps,
.margins = 1,
.fun = s_values,
data = data,
n= n,
p = p,
family = family,
coef = coef,
wald = wald,
dev = dev,
.parallel = FALSE,
tcc = tcc)
if(coef == TRUE){
coefPath = lapply(X = sValues,
FUN = solution_path,
row = 1)
coefSpace = reduced_space(list = coefPath, vector = varNames)
output$coefSpace = coefSpace
sVals$coef = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$coef[i,] = sValues[[i]][[1]][1,]
}
base::colnames(sVals$coef) = varNames
base::rownames(sVals$coef) = base::paste0("Bootstrap",1:B)
}
if(wald == TRUE){
waldPath = lapply(X = sValues,
FUN = solution_path,
row = 2)
waldSpace = reduced_space(list = waldPath, vector = varNames)
output$waldSpace = waldSpace
sVals$wald = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$wald[i,] = sValues[[i]][[1]][2,]
}
base::colnames(sVals$wald) = varNames
base::rownames(sVals$wald) = base::paste0("Bootstrap",1:B)
}
if(dev == TRUE){
devQD = base::matrix(data = NA,
nrow = B,
ncol = p)
devPath = lapply(X = sValues,
FUN = solution_path,
row = 3)
devSpace = reduced_space(list = devPath, vector = varNames)
output$devSpace = devSpace
sVals$dev = base::matrix(data = NA_integer_,
nrow = B,
ncol = p)
for (i in 1:B){
sVals$dev[i,] = sValues[[i]][[1]][3,]
devQD[i,] = sValues[[i]][[2]]
}
base::colnames(sVals$dev) = varNames
base::rownames(sVals$dev) = base::paste0("Bootstrap",1:B)
}
countModels = count_models(output,
k = k)
output = check_model_space(output,
k = k,
data = data,
family = family)
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
devtools::document()
devtools::load_all()
countModels = count_models(output,
k = k)
output = check_model_space(output,
k = k,
data = data,
family = family,
tcc = tcc)
additional = countModels %>%
base::names()
addition = base::paste0(additional, "Count")
for(i in 1:nMethods){
output[[nMethods + i]] = countModels[[i]]
}
names(output)[nMethods + 1:nMethods] = addition
for(i in 1:nMethods){
output[[2*nMethods + i]] = sVals[[i]]
}
names(output)[2*nMethods + 1:(nMethods)] = base::paste0(additional, "SVal")
base::colnames(devQD) = varNames
base::rownames(devQD) = base::paste0("B",
1:B)
output$devQD = devQD
base::rownames(bootstraps) = base::paste0("B",
1:B)
output$bootsrap = bootstraps
output$varNames = varNames
utils::data("hospcosts", package ="robmixglm")
data = hospcosts %>%
dplyr::mutate(y = costs) %>%
dplyr::select(-id, - costs, -los)
#paperRobStab = readRDS("./manuscript/hospital_RobStab.rds") # Analysis done for the manuscript
#resamplePaper = paperRobStab$
hospRobStab = model_space(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log),
tcc = 1.5)
hospMPP = sMPP(robStab = hospRobStab)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStab)
hospVIP$plots$dev
resamplePaper = NA
hospRobStabNon = model_space_non(data = data,
B = 100,
m = 50,
nStrata = 5,
family = Gamma(link = log))
hospMPP = sMPP(robStab = hospRobStabNon)
hospMPP$plots$dev
hospVIP = sVIP(robStab = hospRobStabNon)
hospVIP$plots$dev
saveRDS(hospRobStab, "hosp_robust_RobStab.rds")
saveRDS(hospRobStabNon, "hosp_RobStab.rds")
hosp_RobStab <- readRDS("D:/Project_1/RobStabR/manuscript/hosp_RobStab.rds")
paperRobStab = readRDS("./manuscript/hospital_robust_RobStab.rds") # Analysis done for the manuscript
readRDS("./manuscript/hospital_robust_RobStab.rds")
getwd()
paperRobStab = readRDS("./manuscript/hosp_robust_RobStab.rds") # Analysis done for the manuscript
hosp_robust_RobStab <- readRDS("D:/Project_1/RobStabR/manuscript/hosp_robust_RobStab.rds")
paperRobStab = readRDS("./manuscript/hosp_robust_RobStab.rds")
paperRobStab = readRDS("./manuscript/hosp_robust_RobStab.rds")
readRDS("./manuscript/hosp_robust_RobStab.rds")
test = readRDS("./manuscript/hosp_robust_RobStab.rds")
paperRobStab = readRDS("./manuscript/hosp_robust_RobStab.rds")
library(RobStabR)
library(devtools)
install_github("SmithConnor/RobStabR")
